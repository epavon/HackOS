// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array string;
	field int length, maxLen;
	

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		let maxLen = maxLength;
		let length = 0;
		if(~(maxLength = 0)) {
			let string = Array.new(maxLength);			
		}
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if(~(maxLen = 0)) {
			do string.dispose();
		}
		return;
    }
	
	/** Empties the string */
	method void clear() {
		var int i;
		let i = 0;
		
		while(i < length) {
			let string[i] = 0;
			let i = i + 1;
		}
		let length = 0;
		
		return;
	}

    /** Returns the current length of this string. */
    method int length() {
	
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	
		return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let string[j] = c;
		return ;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let string[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let string[length] = 0;
		let length = length - 1;
		
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int i, result, modifier;
		let i = 0;
		let result = 0;
		let modifier = 1;
		
		if(string[i] = 45) {
			let i = i + 1;
			let modifier = -1;
		}
		
		while(i < length) {
			let result = (result*10) + (string[i] - 48); 
			let i = i + 1;
		}
		
		return (result * modifier);
    }

    /** Sets this string to hold a representation of the given value. */
	method void setInt(int i) {
		do clear();
		if(i < 0) {
			do appendChar(45);
			do setUnsignedInt(-1 * i);
		}
		else {
			do setUnsignedInt(i);
		}
		
		return;
	}
	
    method void setUnsignedInt(int val) {
		if((val / 10) = 0) {
			do appendChar(48 + val);			
		}
		else {
			do setUnsignedInt(val/10);			
			do setUnsignedInt(val - ((val/10)*10));
		}
		
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
