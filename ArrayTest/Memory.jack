// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram;
	static Array heap;
	static int freeList;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let freeList = 2048; 
		let heap = 2048;
		let heap[0] = 0;
		let heap[1] = 14335;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int flPtr;
		var int block;
		let block = -1;
		let flPtr = freeList - heap;
		
		while(heap[flPtr] > -1 & block < 0) {
			if(heap[flPtr+1] = (size+2) | heap[flPtr+1] > (size+2) ) {
				// create new block to return to caller
				let block = (heap + flPtr) + (heap[flPtr+1]) - size;
				let ram[block] = -1;
				let ram[block+1] = size;
				let block = block + 2;
				// adjust free block size
				let heap[flPtr+1] = heap[flPtr+1] - (size+2); 				
			}
							
			let flPtr = heap[flPtr] - freeList;			
		}					
		
		if(block > -1) {
			return block;
		}	
		else {
			return -1;
		}
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var int flPtr;
		
		let flPtr = freeList - heap;
		while(heap[flPtr] > 0) {			
			let flPtr = heap[flPtr] - freeList;
		}
		
		let heap[flPtr] = o-2;
		return;
    }    
	
	
	/** De-fragmets the memory blocks to create larger continous blocks of memory */
	function void deFrag() {
		return;
	}
}
